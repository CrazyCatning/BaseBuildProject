// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "save_server/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::save_service;
using namespace std;
class SaveHandler : virtual public SaveIf {
 public:
  SaveHandler() {
    // Your initialization goes here
  }

  int32_t save_data(const std::string& name, const std::string& password, const int32_t player1_id, const int32_t player2_id) {
    // Your implementation goes here
    printf("save_data\n");
    return 0;
  }

};

int main(int argc, char **argv) {
  int port =8000;
  ::std::shared_ptr<SaveHandler> handler(new SaveHandler());
  ::std::shared_ptr<TProcessor> processor(new SaveProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  cout << "Start JIANTING 8000:" << endl;
  server.serve();
  return 0;
}

